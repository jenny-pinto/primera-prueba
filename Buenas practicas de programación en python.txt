Definición de variables.
-Para escribir variables en python se deben estableces estas reglas:
-Usar nombres que revelen intenciones.
-Usar nombres descriptivos.
-Las variables deben ayudar a identificar cual es su uso.
-si la variable tiene valor booleano, escribela como una pregunta. ejm: 'is'.
-si la variable contiene números, usa palabras que acompañen las cantidades.
-Para las variables de tipo enteras, debes usar IN. ejm: 'INumero'.
-Para las variables de tipo flotantes, debes usar F. ejm: 'FNumero'.
-Para las variables de tipo string, debes usar S. ejm: 'SNumero'.


Identificadores a nombres de variables:
-Se forman por letras, numeros y guiones bajos '_'.
-No deben tener espacios.
-No pueden tomar el nombre de palabras reservadas en python.
-No puedentener caracteres especiales las variables.


Estructura condicional:

#Condicional if:

if <condición>:
   <sentencias>
   ...

Si (if) se cumple la <condición>:
        Ejecuta las siguientes sentencias <sentencias>
        ...

Ejm:

password == 'ABC123'

if password == 'ABC123'
    print('la clave es correcta')

#Condicional if y else:

if <condición>:
   <sentencias>
else:
   <sentencia>

Si (if) se cumple la <condición>:
        Ejecuta las siguientes <sentencias>
si no (else) se cumple la <condición>:
        Ejecuta estas <sentencias>

Ejm:

if password == 'ABC123'
    print('la clave es correcta')
else:
    print('la clave es incorrecta')

#Condicional if elif 

if <condición>:
   <sentencias>
elif <condición>:
   <sentencia>

Si (if) se cumple la <condición>:
        Ejecuta las siguientes <sentencias>
si no (elif) se cumple esta <condición>:
        Ejecuta estas <sentencias>

Ejm:

password = 'root'
usuario = 'admin'

if usuario == 'admin' and password == 'root'
    print('usuario correcto / clave correcta')
elif usuario == 'admin' and password != 'root':
    print('usuario correcto / clave incorrecta')

#While

while <condición>:
   <sentencias>
   ...

Mientras (while) se cumpla esta <condición>:
         Ejecuta las siguientes <sentencias>
         ...
#Ejm:
multiplicando = 11
multiplicador = 1
producto = 0

while multiplicador <= 10:
      producto = multiplicando * multiplicador
      print (f'{multiplicador} = {producto}
      multiplicador = multiplicador + 1 

#for

for <elemento> in <colección>:
    <sentencias>
    ...

Para cada (for) <elemento> en (in) la <coleccion>:
          Ejecuta las siguientes <sentencias>
          ...

#ejm

nombres = ['juan', 'antonio', 'pedro', 'herminio']

for nombre in nombres:
    print(nombre)

#for-in-rage

for <elemento> in <rango>:
    <sentencias>
    ...

Para cada (for) <elemento> en (in) este <rango>:
          Ejecuta las siguientes <sentencias>
          ...

#Ejm:

base = int(input('> Intriduce el número a elevar:'))

for exponente in range (0,10):
    potencia = base ** exponente
    print(f'{base} elevado a {exponente} es {potencia}')

#Caracteres Especiales:
'\n' : Nueva linea.
'\t' : Tabulación (Espacio).
'\'' : Comillas simples en una cadena delimitada por commillas simples.
'\"' : Comillas dobles en una cadena delimitada por comillas dobles.
'\\' : Barra invertida.

#Concatenación de cadenas:
Permite combinar 2 o más cadenas para formar una cadena nueva.

-Operador '+': Es el más directo para concatenar cadenas(Se pone el '+' entre las cadenas que se van a unir).

#Ejm:

Concatenación = "Hola" + "Mundo"

-Función 'join': Permite unir varias cadenas(Se pasa cada cadena a concatenar separadas por coma y entre parentesis).

#Ejm:

"".join(['cadena1', 'cadena2', 'cadena3'])

#Formato de cadenas
Permite incluir texto, variables y dar cierto formato a las cadenas.

- 'f-string' : Se usa para dar formato en las cadenas(Es la opción más sencilla, rápida y legible.

#Ejm:

resultado = f'Hola {variable}'

- Metodo format: Permite construir cadenas muy complejas(Es muy versátil y poderoso.

#Ejm:

resultado = 'Hola {}'.format (variable).

La variable es la que define en la cadena.

#Metodos de cadenas.

-'.upper()' : CAMBIA LAS LETRAS A MAYÚSCULAS.
-'.lower()' : cambia las letras a minúsculas.
-'.strip()' : Elimina espacios en blanco al inicio y al final de la cadena.

#Largo de una cadena:
Funciona con varios tipos de datos(se usa para obtener la longitud de una cadena).

-'len()'

Para calcular el largo de una cadena se toman en cuenta todos los caracteres de una cadena, incluyendo espacios, caracteres especiales, etc.

#Ejm:

cadena1 = 'Hola, Mundo!'
longitud = len(cadena1)

#Subcadenas:

Es una parte de una cadena principal(Se pueden extraer, buscar, reemplazar, etc.)

#Manejo de subcadenas:
-'slicing' : Extracción de cadenas(Permite indicar el índice de inicio y el indice final(Sin incluir este último caracter)).

#Ejm:

subcadena = cadena[inicio:fin]

#Buscar subcadenas:
-'find()': Buscar subcadenas(Devuelve el índice de la primera aparición de la subcadena)(Si no encuentra la subcadena, devuelve -1).

#Ejm:

cadena = 'Hola mundo"
posicion = cadena.find('mundo')

#Reemplazar subcadenas
-'replace' : Reemplaza una subcadena por otra dentro de una cadena principal

cadena = 'Hola mundo'
nueva_cadena = cadena replace('mundo', 'a todos')
print(nueva_cadena) 

#Separar subcadenas:
Sirve para procesar cadenas, recuper datos en una base de datos, etc.
-'split' : Permite dividir una cadena en una lista de subcadenas basadas en un caracter separador(espacios).

#Ejm:

datos = 'Juan, 30, 'México'
lista = datos.split(',')

#Poner en mayuscula la primera letra de cada palabra de la cadena:

-'title()' :  Pone la primera leta de cada palabra de la cadena de texto en mayuscula.

#Ejm:

nombre = input('¿Cual es tu nombre?: ') 
print(nombre.title())

#Multiplicación de cadenas

Ejm:

texto = 'Hola'
veces = 5
resultado = texto * veces
print(resultado)

HolaHolaHolaHolaHola

#Conversion de tipos de datos:(casting)
Tecnica para manipular datos que no están en el tipo requerido.

-'int()' : Convertir a entero
-'float()' : Convertir a flotante
-'str()' : Convertir a una cadena
-'bool()' : Convertir a booleano

#Entrada de datos:

-'input()' : Pausa la ejecución del programa y espera que el usuario introduzca algún texto desde el teclado.
	     Despues de que el usuario presione Enter, el texto introducido se vuelve una cadena (str).

#Generar valores aleatorios:
Se debe importar primero el módulo random para posteriormente usar la función randint

-'import random' : Importa el módulo random.
-'randint()' : Permite generar números aleatorios.

#Ejm: 

randint(a, b) : devuelve un número aleatorio entre a y b, incluyendo estos valores.

#Operadores:
Simbolos especiales que están diseñados para realizar operaciones especificas.

#Operadores Aritméticos:
Calculos matemáticos básicos

-'+' : Sumar
-'-' : Restar
-'*' : Multiplicar
-'/' : Dividir
-'//' : División entera
-'**' : Exponente
-'%' : Módulo (Regresa el residuo de la división)

#Operadores de Asignación:
Asignar valores a variables.

-'='

#Sintaxis:

variable = valor

#Asignación multiple:
Asigna valores a varias variables en una sola línea de código.

#Sintaxis:

variable1, variable2 = valor1, valor2}

#Asignación Encadenada:
Asigna el mismo valor a multiples variables.

#Sintaxis:

variable1 = variable2 = valor

#Operadores de asignación compuestos:
Combinan una operación aritmética con una asignación, haciendo las operaciones más concisas.

-'+=' : a = a + b
-'-=' : a = a - b
-'*=' : a = a * b
-'/=' : a = a / b

#Sintaxis:

variable OPERADOR= valor

#Ejm:

contador = 0
contador += 1

#Operadores condicionales:
Se utiliza para comparar dos valores.
El resultado SIEMPRE es un valor booleano 'True' o 'False', dependiendo si la condición se cumple o no.

-Operador de igualdad '==' : Compara dsi dos valores son iguales 

#Sintaxis:

a = b

#Ejm:

print(5 == 5) #True
print(5 == 6) #False

-Operador distinto '!=' : Compara si dos valores son distintos.

#Sintaxis:

a != b

#Ejm: 

print(5 != 5) #False
print(5 != 6) #True

-Operador menor que (<) : Compara si el valor de la izquierda es menor que el de la derecha.

#Ejm:

print(3 < 5) #True
print(5 < 3) #False

-Operador menor o igual que (<=) : Verifica si el valor de la izquierda es menor o igual qe el de la derecha.

#Ejm:

print(3 <= 5) #True
print(5 <= 5) #True
print(6 <= 5) #False

-Operador mayor que (>) : Compara si el valor de la izquierda es mayor que el de la derecha.

#Ejm: 

print(5 > 3) #True
print(3 > 5) #False

-Operador mayor o igual que (>=) : Verifica si el valo de la izquierda es mayor o igual que el de la derecha.

#Ejm: 

print(5 >= 3) #True
print(5 >= 5) #True
print(3 >= 5) #False

#Operadores de comparación: 
Compara un valor con otro.

#Operadores Lógicos:
Combina operaciones condicionales o lógicas.
Realizan operaciones lógicas con valores booleanos.

-Operador lógico and (y) : Devuelve True si ambos operandos son verdaderos.

#Ejm:

exp1 = False
exp2 = True
print(exp1 and exp2) #False

#TABLA DE VERDAD:
---------------------------------
   a   |     b      |   a and b  |
---------------------------------|
False  |   False    |    False   |
False  |   True     |    False   |
True   |   False    |    False   |
True   |   True     |    True    |
----------------------------------

-Operador lógico or (o) : Devuelve True si cualquiera de los operandos es verdadero.

#Ejm:

exp1 = False
exp2 = True
print(exp1 or exp2) #True

TABLA VERDAD OR
---------------------------------
   a   |     b      |   a or b   |
---------------------------------|
False  |   False    |    False   |
False  |   True     |    True    |
True   |   False    |    True    |
True   |   True     |    True    |
----------------------------------

#Operador lógico not (no) : Invierte el valor del operador.
Es un operador unario

#Ejm:

exp1 = False
print(not exp1) #True

TABLA VERDAD NOT
--------------------
   a    |   not a   |
--------------------|
False   |   True    |
True    |   False   |
---------------------

#Operadores de identidad:
Compara si dos variables son el mismo objeto

#Operradores de membresía:
Prueba si una secuencia se presenta en un objeto.

#Presedencia de operadores:
# 1. Paréntesis (): Los paréntesis tienen la mayor precedencia
# 2. Exponente **: Este operador calcula la potencia de un número.
# 3. Unario +, -: Estos operadores realizan operaciones unarias de positivo y negativo
# 4. Multiplicación *, División /, División entera //, Módulo %
# 5. Suma +, Resta -: Estos operadores realizan operaciones aritméticas.
# 6. Comparaciones (==, !=, >, <, >=, <=)
# 7. Operadores lógicos not, and, or
# 8. Asignación (=, +=, -=, *=, /=, entre otros)

#Sentencias de decisión:
Permiten controlar el flujo de ejecución del programa.
Se puede utilizar las estructuras if, else y elif

-Sentencia if: Permite ejecutar un bloque de codigo si la condición a evaluar es verdadera.

#Sintaxis:
if condicion: 
     #Bloque de código que se 
     #Ejecuta si la condición es True

#Ejm:

edad = 30
if edad >= 18:
    print('Eres mayor de edad.')

-Sentencia else : Se usa para ejecutar un bloque de código cuando la condición del if es falsa.

#Sintaxis:

if condicion: 
     #Bloque de código que se 
     #Ejecuta si la condición es True
else:
     #Bloque de código que se ejecuta
     #Si la condición es falsa

#Ejm:

edad = 10
if edad >= 18:
    print('Eres mayor de edad.')
else:
    print('Eres menor de edad.')

-Sentencia elif : Es una abreviatura de 'else if' , y se utiliza vuando necesitamos verificar múltiples condiciones, una tras otra.
Se pueden agregar todas las condiciones de tipo elif como se necesite.
Solo se pueden utilizar despues de un if y antes de un else.

#Sintaxis:
if condicion1:
   #Bloque de código condición1 True
elif condicion2:
   #Bloque de código condicion2 True
else: 
   #Bloque de código condiciones False

#Ejm:

edad = 16
if edad >= 18:
    print('Eres mayor de edad.')
elif 13 <= edad < 18:
    print('Eres un adolescente')
else:
    print('Eres un niño')















